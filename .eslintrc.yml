env:
  browser: true
  amd: true

rules:
  ### Possible Errors ###
  # These rules relate to possible syntax or logic errors in JavaScript code:

  comma-dangle: 2                     # require or disallow trailing commas
  no-cond-assign: 2                   # disallow assignment operators in conditional expressions
  no-console: 2                       # disallow the use of console
  no-constant-condition: 2            # disallow constant expressions in conditions
  no-control-regex: 2                 # disallow control characters in regular expressions
  no-debugger: 2                      # disallow the use of debugger
  no-dupe-args: 2                     # disallow duplicate arguments in function definitions
  no-dupe-keys: 2                     # disallow duplicate keys in object literals
  no-duplicate-case: 2                # disallow duplicate case labels
  no-empty: 2                         # disallow empty block statements
  no-empty-character-class: 2         # disallow empty character classes in regular expressions
  no-ex-assign: 2                     # disallow reassigning exceptions in catch clauses
  no-extra-boolean-cast: 2            # disallow unnecessary boolean casts
  no-extra-parens: 2                  # disallow unnecessary parentheses
  no-extra-semi: 2                    # disallow unnecessary semicolons
  no-func-assign: 2                   # disallow reassigning function declarations
  no-inner-declarations: 2            # disallow function or var declarations in nested blocks
  no-invalid-regexp: 2                # disallow invalid regular expression strings in RegExp constructors
  no-irregular-whitespace: 2          # disallow irregular whitespace outside of strings and comments
  no-negated-in-lhs: 2                # disallow negating the left operand in in expressions
  no-obj-calls: 2                     # disallow calling global object properties as functions
  no-prototype-builtins: 2            # Disallow use of Object.prototypes builtins directly
  no-regex-spaces: 2                  # disallow multiple spaces in regular expression literals
  no-sparse-arrays: 2                 # disallow sparse arrays
  no-unexpected-multiline: 2          # disallow confusing multiline expressions
  no-unreachable: 2                   # disallow unreachable code after return, throw, continue, and break statements
  no-unsafe-finally: 2                # disallow control flow statements in finally blocks
  use-isnan: 2                        # require calls to isNaN() when checking for NaN
  valid-jsdoc:                        # enforce valid JSDoc comments
    - 1
    - requireReturn: false
      prefer:
        returns: return
        arg: param
        argument: param
      preferType:
        String: string
        object: Object
  valid-typeof: 2                     # enforce comparing typeof expressions against valid strings

  ### Best Practices ###
  # These rules relate to better ways of doing things to help you avoid problems:

  accessor-pairs: 2                   # enforce getter and setter pairs in objects
  array-callback-return: 2            # enforce return statements in callbacks of array methods
  block-scoped-var: 2                 # enforce the use of variables within the scope they are defined
  complexity: 2                       # enforce a maximum cyclomatic complexity allowed in a program
  consistent-return: 2                # require return statements to either always or never specify values
  curly: 2                            # enforce consistent brace style for all control statements
  default-case: 2                     # require default cases in switch statements
  dot-location:                       # enforce consistent newlines before and after dots
    - 2
    - property
  dot-notation: 2                     # enforce dot notation whenever possible
  eqeqeq: 2                           # require the use of === and !==
  guard-for-in: 2                     # require for-in loops to include an if statement
  no-alert: 2                         # disallow the use of alert, confirm, and prompt
  no-caller: 2                        # disallow the use of arguments.caller or arguments.callee
  no-case-declarations: 2             # disallow lexical declarations in case clauses
  no-div-regex: 2                     # disallow division operators explicitly at the beginning of regular expressions
  no-else-return: 2                   # disallow else blocks after return statements in if statements
  no-empty-function: 2                # disallow empty functions
  no-empty-pattern: 2                 # disallow empty destructuring patterns
  no-eq-null: 2                       # disallow null comparisons without type-checking operators
  no-eval: 2                          # disallow the use of eval()
  no-extend-native: 2                 # disallow extending native types
  no-extra-bind: 2                    # disallow unnecessary calls to .bind()
  no-extra-label: 2                   # disallow unnecessary labels
  no-fallthrough: 2                   # disallow fallthrough of case statements
  no-floating-decimal: 2              # disallow leading or trailing decimal points in numeric literals
  no-implicit-coercion: 2             # disallow shorthand type conversions
  no-implicit-globals: 2              # disallow var and named function declarations in the global scope
  no-implied-eval: 2                  # disallow the use of eval()-like methods
  no-invalid-this: 0                  # disallow this keywords outside of classes or class-like objects
  no-iterator: 2                      # disallow the use of the __iterator__ property
  no-labels: 2                        # disallow labeled statements
  no-lone-blocks: 2                   # disallow unnecessary nested blocks
  no-loop-func: 2                     # disallow function declarations and expressions inside loop statements
  no-magic-numbers:                   # disallow magic numbers
    - 2
    - ignore:
      - -1
      - 0
      - 1
  no-multi-spaces: 2                  # disallow multiple spaces
  no-multi-str: 2                     # disallow multiline strings
  no-native-reassign: 2               # disallow reassigning native objects
  no-new: 2                           # disallow new operators outside of assignments or comparisons
  no-new-func: 2                      # disallow new operators with the Function object
  no-new-wrappers: 2                  # disallow new operators with the String, Number, and Boolean objects
  no-octal: 2                         # disallow octal literals
  no-octal-escape: 2                  # disallow octal escape sequences in string literals
  no-param-reassign: 2                # disallow reassigning function parameters
  no-proto: 2                         # disallow the use of the __proto__ property
  no-redeclare: 2                     # disallow var redeclaration
  no-return-assign: 2                 # disallow assignment operators in return statements
  no-script-url: 2                    # disallow javascript: urls
  no-self-assign: 2                   # disallow assignments where both sides are exactly the same
  no-self-compare: 2                  # disallow comparisons where both sides are exactly the same
  no-sequences: 2                     # disallow comma operators
  no-throw-literal: 2                 # disallow throwing literals as exceptions
  no-unmodified-loop-condition: 2     # disallow unmodified loop conditions
  no-unused-expressions: 2            # disallow unused expressions
  no-unused-labels: 2                 # disallow unused labels
  no-useless-call: 2                  # disallow unnecessary calls to .call() and .apply()
  no-useless-concat: 2                # disallow unnecessary concatenation of literals or template literals
  no-useless-escape: 2                # disallow unnecessary escape characters
  no-void: 2                          # disallow void operators
  no-warning-comments: 1              # disallow specified warning terms in comments
  no-with: 2                          # disallow with statements
  radix:                              # enforce the consistent use of the radix argument when using parseInt()
    - 2
    - as-needed
  vars-on-top: 0                      # require var declarations be placed at the top of their containing scope
  wrap-iife: 2                        # require parentheses around immediate function invocations
  yoda: 2                             # require or disallow “Yoda” conditions

  ### Strict Mode ###
  # These rules relate to strict mode directives:

  strict: 2                           # require or disallow strict mode directives

  ### Variables ###
  # These rules relate to variable declarations:

  init-declarations: 0                # require or disallow initialization in var declarations
  no-catch-shadow: 2                  # disallow catch clause parameters from shadowing variables in the outer scope
  no-delete-var: 2                    # disallow deleting variables
  no-label-var: 2                     # disallow labels that share a name with a variable
  no-restricted-globals: 2            # disallow specified global variables
  no-shadow: 2                        # disallow var declarations from shadowing variables in the outer scope
  no-shadow-restricted-names: 2       # disallow identifiers from shadowing restricted names
  no-undef: 2                         # disallow the use of undeclared variables unless mentioned in /*global */ comments
  no-undef-init: 2                    # disallow initializing variables to undefined
  no-undefined: 0                     # disallow the use of undefined as an identifier
  no-unused-vars: 2                   # disallow unused variables
  no-use-before-define: 2             # disallow the use of variables before they are defined

  ### Node.js and CommonJS ###
  # These rules relate to code running in Node.js, or in browsers with CommonJS:

  callback-return: 2                  # require return statements after callbacks
  global-require: 2                   # require require() calls to be placed at top-level module scope
  handle-callback-err: 2              # require error handling in callbacks
  no-mixed-requires: 2                # disallow require calls to be mixed with regular var declarations
  no-new-require: 2                   # disallow new operators with calls to require
  no-path-concat: 2                   # disallow string concatenation with __dirname and __filename
  no-process-env: 2                   # disallow the use of process.env
  no-process-exit: 2                  # disallow the use of process.exit()
  no-restricted-modules: 2            # disallow specified modules when loaded by require
  no-sync: 2                          # disallow synchronous methods

  ### Stylistic Issues ###
  # These rules relate to style guidelines, and are therefore quite subjective:

  array-bracket-spacing: 2            # enforce consistent spacing inside array brackets
  block-spacing: 2                    # enforce consistent spacing inside single-line blocks
  brace-style: 2                      # enforce consistent brace style for blocks
  camelcase: 2                        # enforce camelcase naming convention
  comma-spacing: 2                    # enforce consistent spacing before and after commas
  comma-style: 2                      # enforce consistent comma style
  computed-property-spacing: 2        # enforce consistent spacing inside computed property brackets
  consistent-this: 2                  # enforce consistent naming when capturing the current execution context
  eol-last: 2                         # enforce at least one newline at the end of files
  func-names: 0                       # enforce named function expressions
  func-style: 2                       # enforce the consistent use of either function declarations or expressions
  id-blacklist: 0                     # disallow specified identifiers
  id-length: 0                        # enforce minimum and maximum identifier lengths
  id-match: 0                         # require identifiers to match a specified regular expression
  indent:                             # enforce consistent indentation
    - 1
    - 4
    - SwitchCase: 1
    #- VariableDeclarator:            # FIXME fix!
    #  - var: 2
    #  - let: 2
    #  - const: 3
  jsx-quotes: 2                       # enforce the consistent use of either double or single quotes in JSX attributes
  key-spacing: 2                      # enforce consistent spacing between keys and values in object literal properties
  keyword-spacing: 2                  # enforce consistent spacing before and after keywords
  linebreak-style: 2                  # enforce consistent linebreak style
  lines-around-comment: 2             # require empty lines around comments
  max-depth: 2                        # enforce a maximum depth that blocks can be nested
  max-len:                            # enforce a maximum line length
    - 1
    - code: 120
      ignoreUrls: true
  max-nested-callbacks: 2             # enforce a maximum depth that callbacks can be nested
  max-params:                         # enforce a maximum number of parameters in function definitions
    - 1
    - max: 5
  max-statements:                     # enforce a maximum number of statements allowed in function blocks
    - 1
    - max: 20
  max-statements-per-line: 2          # enforce a maximum number of statements allowed per line
  new-cap: 2                          # require constructor function names to begin with a capital letter
  new-parens: 2                       # require parentheses when invoking a constructor with no arguments
  newline-after-var: 0                # require or disallow an empty line after var declarations
  newline-before-return: 0            # require an empty line before return statements
  newline-per-chained-call:           # require a newline after each call in a method chain
    - 2
    - ignoreChainWithDepth: 3
  no-array-constructor: 2             # disallow Array constructors
  no-bitwise: 2                       # disallow bitwise operators
  no-continue: 2                      # disallow continue statements
  no-inline-comments: 2               # disallow inline comments after code
  no-lonely-if: 2                     # disallow if statements as the only statement in else blocks
  no-mixed-spaces-and-tabs: 2         # disallow mixed spaces and tabs for indentation
  no-multiple-empty-lines: 2          # disallow multiple empty lines
  no-negated-condition: 2             # disallow negated conditions
  no-nested-ternary: 2                # disallow nested ternary expressions
  no-new-object: 2                    # disallow Object constructors
  no-plusplus: 0                      # disallow the unary operators ++ and --
  no-restricted-syntax: 0             # disallow specified syntax
  no-spaced-func: 2                   # disallow spacing between function identifiers and their applications
  no-ternary: 0                       # disallow ternary operators
  no-trailing-spaces: 1               # disallow trailing whitespace at the end of lines
  no-underscore-dangle: 0             # disallow dangling underscores in identifiers
  no-unneeded-ternary: 2              # disallow ternary operators when simpler alternatives exist
  no-whitespace-before-property: 2    # disallow whitespace before properties
  object-curly-spacing: 2             # enforce consistent spacing inside braces
  object-property-newline: 2          # enforce placing object properties on separate lines
  one-var: 0                          # enforce variables to be declared either together or separately in functions
  one-var-declaration-per-line: 1     # require or disallow newlines around var declarations
  operator-assignment: 2              # require or disallow assignment operator shorthand where possible
  operator-linebreak:                 # enforce consistent linebreak style for operators
    - 2
    - before
  padded-blocks:                      # require or disallow padding within blocks
    - 2
    - never
  quote-props:                        # require quotes around object literal property names
    - 2
    - consistent-as-needed
  quotes: 0                           # enforce the consistent use of either backticks, double, or single quotes
  require-jsdoc: 2                    # require JSDoc comments
  semi: 2                             # require or disallow semicolons instead of ASI
  semi-spacing: 2                     # enforce consistent spacing before and after semicolons
  sort-vars: 0                        # require variables within the same declaration block to be sorted
  space-before-blocks: 2              # enforce consistent spacing before blocks
  space-before-function-paren:        # enforce consistent spacing before function definition opening parenthesis
    - 1
    #- anonymous: always
    - named: never
  space-in-parens: 2                  # enforce consistent spacing inside parentheses
  space-infix-ops: 2                  # require spacing around operators
  space-unary-ops: 2                  # enforce consistent spacing before or after unary operators
  spaced-comment: 2                   # enforce consistent spacing after the // or /* in a comment
  unicode-bom: 2                      # require or disallow the Unicode BOM
  wrap-regex: 1                       # require parenthesis around regex literals

  ### ECMAScript 6 ###
  # These rules relate to ES6, also known as ES2015:

  arrow-body-style: 0                 # require braces around arrow function bodies
  arrow-parens: 0                     # require parentheses around arrow function arguments
  arrow-spacing: 0                    # enforce consistent spacing before and after the arrow in arrow functions
  constructor-super: 0                # require super() calls in constructors
  generator-star-spacing: 0           # enforce consistent spacing around * operators in generator functions
  no-class-assign: 0                  # disallow reassigning class members
  no-confusing-arrow: 0               # disallow arrow functions where they could be confused with comparisons
  no-const-assign: 0                  # disallow reassigning const variables
  no-dupe-class-members: 0            # disallow duplicate class members
  no-duplicate-imports: 0             # disallow duplicate module imports
  no-new-symbol: 0                    # disallow new operators with the Symbol object
  no-restricted-imports: 0            # disallow specified modules when loaded by import
  no-this-before-super: 0             # disallow this/super before calling super() in constructors
  no-useless-computed-key: 0          # disallow unnecessary computed property keys in object literals
  no-useless-constructor: 0           # disallow unnecessary constructors
  no-useless-rename: 0                # disallow renaming import, export, and destructured assignments to the same name
  no-var: 0                           # require let or const instead of var
  object-shorthand: 0                 # require or disallow method and property shorthand syntax for object literals
  prefer-arrow-callback: 0            # require arrow functions as callbacks
  prefer-const: 0                     # require const declarations for variables that are never reassigned after declared
  prefer-reflect: 0                   # require Reflect methods where applicable
  prefer-rest-params: 0               # require rest parameters instead of arguments
  prefer-spread: 0                    # require spread operators instead of .apply()
  prefer-template: 0                  # require template literals instead of string concatenation
  require-yield: 0                    # require generator functions to contain yield
  sort-imports: 0                     # enforce sorted import declarations within modules
  template-curly-spacing: 0           # require or disallow spacing around embedded expressions of template strings
  yield-star-spacing: 0               # require or disallow spacing around the * in yield* expressions
